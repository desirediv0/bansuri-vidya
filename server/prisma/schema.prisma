generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String             @id @default(uuid())
  name                    String
  email                   String             @unique
  password                String?
  usertype                UserType           @default(ONLINE)
  role                    Role               @default(STUDENT)
  slug                    String             @unique
  isVerified              Boolean            @default(false)
  verificationToken       String?
  verificationTokenExpiry DateTime?
  resetToken              String?
  resetTokenExpiry        DateTime?
  provider                String?            @default("credentials")
  refreshToken            String?
  isOffline               Boolean            @default(false)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  billingDetails          BillingDetails[]
  cart                    Cart[]
  certificates            Certificate[]
  couponUsage             CouponUsage[]
  courses                 Course[]
  courseCompletions       CourseCompletion[]
  visibleCourses          CourseVisibility[]
  enrollments             Enrollment[]
  fees                    Fee[]
  feePayments             FeePayment[]
  payments                Payment[]
  purchases               Purchase[]
  razorPayCustomer        RazorPayCustomer[]
  reviews                 Review[]
  userProgress            UserProgress[]
  ZoomClassReview         ZoomClassReview[]
  createdZoomSessions     ZoomLiveClass[]
  zoomPayments            ZoomPayment[]
  zoomSubscriptions       ZoomSubscription[]

  @@index([email])
}

model Course {
  id                String                  @id @default(uuid())
  title             String
  description       String
  thumbnail         String?
  price             Float?
  salePrice         Float?
  slug              String                  @unique
  paid              Boolean                 @default(true)
  videoUrl          String?
  language          String?
  subheading        String?
  metaTitle         String?
  metaDesc          String?
  validityDays      Int                     @default(0)
  isPublic          Boolean                 @default(true)
  isFeatured        Boolean                 @default(false)
  isPopular         Boolean                 @default(false)
  isTrending        Boolean                 @default(false)
  isBestseller      Boolean                 @default(false)
  isPublished       Boolean                 @default(false)
  userId            String
  categoryId        String
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @default(now())
  billingDetails    BillingDetailsCourses[]
  cart              Cart[]
  certificates      Certificate[]
  chapters          Chapter[]
  couponUsage       CouponUsage[]
  category          Category                @relation(fields: [categoryId], references: [id])
  user              User                    @relation(fields: [userId], references: [id])
  completions       CourseCompletion[]
  visibleTo         CourseVisibility[]
  enrollments       Enrollment[]
  purchases         Purchase[]
  reviews           Review[]
  sections          Section[]
  applicableCoupons Coupon[]                @relation("CouponToCourse")

  @@index([categoryId])
}

model CourseVisibility {
  id        String   @id @default(uuid())
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
  @@index([courseId])
  @@index([userId])
}

model Fee {
  id                String       @id @default(uuid())
  amount            Float
  dueDate           DateTime
  description       String?
  status            FeeStatus    @default(PENDING)
  type              FeeType      @default(MONTHLY)
  title             String
  lateFeeDate       DateTime?
  lateFeeAmount     Float?
  isOfflineFee      Boolean      @default(false)
  recurringDuration Int?
  recurringEndDate  DateTime?
  gracePeriod       Int?
  nextDueDate       DateTime?
  isRecurring       Boolean      @default(false)
  userId            String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now())
  user              User         @relation(fields: [userId], references: [id])
  payments          FeePayment[]

  @@index([userId])
  @@index([dueDate])
}

model FeePayment {
  id                  String        @id @default(uuid())
  amount              Float
  paymentDate         DateTime      @default(now())
  razorpay_order_id   String?
  razorpay_payment_id String?
  razorpay_signature  String?
  status              PaymentStatus @default(PENDING)
  receiptNumber       String        @unique
  lateFeeApplied      Float?
  actualDueAmount     Float
  feeId               String
  userId              String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())
  fee                 Fee           @relation(fields: [feeId], references: [id])
  user                User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([feeId])
}

model Coupon {
  id              String        @id @default(uuid())
  code            String        @unique
  discount        Float
  limit           Int           @default(-1)
  isActive        Boolean       @default(true)
  oneTimePerUser  Boolean       @default(false)
  validFrom       DateTime      @default(now())
  validUntil      DateTime?
  minimumPurchase Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  usedBy          CouponUsage[]
  courses         Course[]      @relation("CouponToCourse")
}

model Enrollment {
  id         String    @id @default(uuid())
  userId     String
  courseId   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiryDate DateTime?
  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Courses   Course[]
}

model Section {
  id          String    @id @default(uuid())
  title       String
  position    Int       @default(1)
  isPublished Boolean   @default(false)
  isFree      Boolean   @default(false)
  slug        String    @unique
  courseId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  chapters    Chapter[]
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Chapter {
  id           String         @id @default(uuid())
  title        String
  description  String?
  videoUrl     String?
  pdfUrl       String?
  audioUrl     String?
  position     Int            @default(1)
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  slug         String         @unique
  sectionId    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  courseId     String?
  Course       Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  section      Section        @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
}

model UserProgress {
  id           String    @id @default(uuid())
  userId       String
  chapterId    String
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  watchedTime  Float     @default(0)
  lastAccessed DateTime  @default(now())
  chapter      Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([userId])
  @@index([chapterId])
}

model Purchase {
  id            String    @id @default(uuid())
  userId        String
  courseId      String
  purchasePrice Float
  discountPrice Float?
  couponCode    String?
  expiryDate    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model RazorPayCustomer {
  id         String   @id @default(uuid())
  userId     String
  razorpayId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Payment {
  id                  String   @id @default(uuid())
  razorpay_order_id   String
  razorpay_payment_id String
  razorpay_signature  String
  status              String
  userId              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id])
}

model BillingDetails {
  id            String                  @id @default(uuid())
  fullName      String
  email         String
  address       String
  city          String
  state         String
  country       String
  zipCode       String
  mobileNumber  String?
  paymentStatus Boolean                 @default(false)
  saveAddress   Boolean                 @default(false)
  userId        String
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @default(now())
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses       BillingDetailsCourses[]

  @@index([userId])
}

model BillingDetailsCourses {
  id               String         @id @default(uuid())
  billingDetailsId String
  courseId         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  billingDetails   BillingDetails @relation(fields: [billingDetailsId], references: [id], onDelete: Cascade)
  course           Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([billingDetailsId, courseId])
  @@index([billingDetailsId])
  @@index([courseId])
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  isEdited  Boolean  @default(false)
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
}

model CouponUsage {
  id       String   @id @default(uuid())
  couponId String
  userId   String
  courseId String
  usedAt   DateTime @default(now())
  coupon   Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([couponId, userId, courseId])
}

model CourseCompletion {
  id            String   @id @default(uuid())
  userId        String
  courseId      String
  completedAt   DateTime @default(now())
  certificateId String   @unique
  grade         String?
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Certificate {
  id             String   @id @default(uuid())
  userId         String
  courseId       String
  issuedAt       DateTime @default(now())
  certificateUrl String?
  course         Course   @relation(fields: [courseId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String
  subject   String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ZoomLiveClass {
  id                  String              @id @default(cuid())
  title               String
  description         String
  startTime           String
  zoomLink            String?
  zoomMeetingId       String?
  zoomPassword        String?
  author              String?
  isActive            Boolean             @default(true)
  price               Float               @default(0)
  getPrice            Boolean             @default(false)
  registrationFee     Float               @default(0)
  courseFee           Float               @default(0)
  courseFeeEnabled    Boolean             @default(false)
  capacity            Int?
  recurringClass      Boolean             @default(false)
  thumbnailUrl        String
  hasModules          Boolean             @default(false)
  isFirstModuleFree   Boolean             @default(false)
  currentRaga         String?
  currentOrientation  String?
  sessionDescription  String?
  slug                String              @unique
  userId              String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  registrationEnabled Boolean             @default(true)
  isOnClassroom       Boolean             @default(false)
  reviews             ZoomClassReview[]
  createdBy           User                @relation(fields: [userId], references: [id])
  modules             ZoomSessionModule[]
  subscriptions       ZoomSubscription[]

  @@index([userId])
}

model ZoomSubscription {
  id                    String             @id @default(uuid())
  startDate             DateTime           @default(now())
  endDate               DateTime
  status                SubscriptionStatus @default(ACTIVE)
  isApproved            Boolean            @default(false)
  moduleId              String?
  isRegistered          Boolean            @default(false)
  hasAccessToLinks      Boolean            @default(false)
  userId                String
  zoomLiveClassId       String
  lastPaymentDate       DateTime           @default(now())
  nextPaymentDate       DateTime
  registrationPaymentId String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  payments              ZoomPayment[]
  module                ZoomSessionModule? @relation(fields: [moduleId], references: [id])
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  zoomLiveClass         ZoomLiveClass      @relation(fields: [zoomLiveClassId], references: [id], onDelete: Cascade)

  @@unique([userId, zoomLiveClassId])
  @@index([userId])
  @@index([zoomLiveClassId])
  @@index([moduleId])
}

model ZoomSessionModule {
  id              String             @id @default(uuid())
  title           String
  description     String?
  startTime       String
  endTime         String?
  zoomLink        String?
  zoomMeetingId   String?
  zoomPassword    String?
  position        Int                @default(1)
  isFree          Boolean            @default(false)
  zoomLiveClassId String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  zoomLiveClass   ZoomLiveClass      @relation(fields: [zoomLiveClassId], references: [id], onDelete: Cascade)
  subscriptions   ZoomSubscription[]

  @@index([zoomLiveClassId])
}

model ZoomPayment {
  id                  String           @id @default(uuid())
  amount              Float
  razorpay_order_id   String?
  razorpay_payment_id String?
  razorpay_signature  String?
  status              PaymentStatus    @default(PENDING)
  receiptNumber       String           @unique
  paymentType         PaymentType      @default(FULL_PAYMENT)
  subscriptionId      String
  userId              String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now())
  subscription        ZoomSubscription @relation(fields: [subscriptionId], references: [id])
  user                User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([subscriptionId])
}

model ZoomClassReview {
  id          String        @id @default(uuid())
  rating      Int
  comment     String?
  isEdited    Boolean       @default(false)
  userId      String
  zoomClassId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  zoomClass   ZoomLiveClass @relation(fields: [zoomClassId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([zoomClassId])
}

model TrackingScript {
  id          String         @id @default(uuid())
  name        String // e.g., "Facebook Pixel", "Google Analytics"
  description String? // Optional description
  script      String         @db.Text // The actual script content
  isActive    Boolean        @default(true)
  position    ScriptPosition @default(HEAD) // Where to inject the script
  priority    Int            @default(0) // Order of execution (higher priority loads first)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([isActive])
  @@index([position])
}

enum Role {
  STUDENT
  ADMIN
}

enum UserType {
  ONLINE
  OFFLINE
}

enum FeeStatus {
  PENDING
  PAID
  OVERDUE
  PARTIAL
}

enum FeeType {
  MONTHLY
  QUARTERLY
  YEARLY
  ONETIME
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  REJECTED
  PENDING_APPROVAL
  REGISTERED
}

enum PaymentType {
  REGISTRATION
  COURSE_ACCESS
  FULL_PAYMENT
}

enum ScriptPosition {
  HEAD
  BODY_START
  BODY_END
}
