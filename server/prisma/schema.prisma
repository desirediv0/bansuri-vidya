// Define your datasource and generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String    @id @default(uuid())
  name                    String
  email                   String    @unique
  password                String?
  usertype                UserType  @default(ONLINE)
  role                    Role      @default(STUDENT)
  slug                    String    @unique
  isVerified              Boolean   @default(false)
  verificationToken       String?
  verificationTokenExpiry DateTime?
  resetToken              String?
  resetTokenExpiry        DateTime?
  provider                String?   @default("credentials")
  refreshToken            String?

  // Course related
  courses      Course[]
  enrollments  Enrollment[]
  userProgress UserProgress[]
  purchases    Purchase[]
  cart         Cart[]
  reviews      Review[]

  // Billing and Payments
  billingDetails   BillingDetails[]
  fees             Fee[]
  feePayments      FeePayment[]
  isOffline        Boolean            @default(false)
  razorPayCustomer RazorPayCustomer[]

  // Coupons
  couponUsage CouponUsage[]

  // Visibility settings
  visibleCourses CourseVisibility[]

  // payments
  payments Payment[]

  courseCompletions CourseCompletion[]

  certificates Certificate[]

  // Zoom related
  createdZoomSessions ZoomLiveClass[]
  zoomSubscriptions   ZoomSubscription[]
  zoomPayments        ZoomPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

enum Role {
  STUDENT
  ADMIN
}

enum UserType {
  ONLINE
  OFFLINE
}

model Course {
  id          String  @id @default(uuid())
  title       String
  description String
  thumbnail   String?
  price       Float?
  salePrice   Float?
  slug        String  @unique
  paid        Boolean @default(true)
  videoUrl    String?
  language    String?
  subheading  String?
  metaTitle   String?
  metaDesc    String?

  // Visibility control
  isPublic  Boolean            @default(true)
  visibleTo CourseVisibility[]

  // Course features
  isFeatured   Boolean @default(false)
  isPopular    Boolean @default(false)
  isTrending   Boolean @default(false)
  isBestseller Boolean @default(false)
  isPublished  Boolean @default(false)

  // Relations
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  // Content
  sections Section[]
  chapters Chapter[]

  // Enrollments and Progress
  enrollments Enrollment[]
  purchases   Purchase[]

  // Billing and Payments
  billingDetails BillingDetailsCourses[]
  cart           Cart[]

  // Reviews and Coupons
  reviews           Review[]
  couponUsage       CouponUsage[]
  applicableCoupons Coupon[] // Coupons specific to this course

  completions CourseCompletion[]

  certificates Certificate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([categoryId])
}

// New model for controlling course visibility
model CourseVisibility {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([courseId, userId])
  @@index([courseId])
  @@index([userId])
}

model Fee {
  id            String    @id @default(uuid())
  amount        Float
  dueDate       DateTime
  description   String?
  status        FeeStatus @default(PENDING)
  type          FeeType   @default(MONTHLY)
  title         String
  lateFeeDate   DateTime?
  lateFeeAmount Float?
  isOfflineFee  Boolean   @default(false)

  // New fields
  recurringDuration Int? // Number of months/quarters/years to recur
  recurringEndDate  DateTime? // When to stop recurring
  gracePeriod       Int? // Number of days for grace period
  nextDueDate       DateTime? // Next due date after payment
  isRecurring       Boolean   @default(false)

  // Relations
  user     User         @relation(fields: [userId], references: [id])
  userId   String
  payments FeePayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
  @@index([dueDate])
}

model FeePayment {
  id                  String        @id @default(uuid())
  amount              Float
  paymentDate         DateTime      @default(now())
  razorpay_order_id   String?
  razorpay_payment_id String?
  razorpay_signature  String?
  status              PaymentStatus @default(PENDING)
  receiptNumber       String        @unique

  lateFeeApplied  Float?
  actualDueAmount Float

  // Relations
  fee    Fee    @relation(fields: [feeId], references: [id])
  feeId  String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
  @@index([feeId])
}

enum FeeStatus {
  PENDING
  PAID
  OVERDUE
  PARTIAL
}

enum FeeType {
  MONTHLY
  QUARTERLY
  YEARLY
  ONETIME
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Updated Coupon model with course-specific features
model Coupon {
  id             String  @id @default(uuid())
  code           String  @unique
  discount       Float
  limit          Int     @default(-1) // -1 means unlimited
  isActive       Boolean @default(true)
  oneTimePerUser Boolean @default(false)

  // New fields for course-specific coupons
  courses         Course[] // Courses this coupon applies to
  validFrom       DateTime  @default(now())
  validUntil      DateTime?
  minimumPurchase Float? // Minimum purchase amount required

  usedBy    CouponUsage[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
}

model Enrollment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  Courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Section {
  id          String  @id @default(uuid())
  title       String
  position    Int     @default(1)
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  slug        String  @unique

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapters Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  pdfUrl      String?
  audioUrl    String?
  position    Int     @default(1)
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  slug        String  @unique

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String?
}

model UserProgress {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  chapter      Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId    String
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  watchedTime  Float     @default(0) // Keep this as watchedTime
  lastAccessed DateTime  @default(now())

  @@unique([userId, chapterId])
  @@index([userId])
  @@index([chapterId])
}

model Purchase {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  purchasePrice Float
  discountPrice Float?
  couponCode    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model RazorPayCustomer {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  razorpayId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Payment {
  id                  String   @id @default(uuid())
  razorpay_order_id   String
  razorpay_payment_id String
  razorpay_signature  String
  status              String
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model BillingDetails {
  id            String                  @id @default(uuid())
  fullName      String
  email         String
  address       String
  city          String
  state         String
  country       String
  zipCode       String
  paymentStatus Boolean                 @default(false)
  saveAddress   Boolean                 @default(false)
  userId        String
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses       BillingDetailsCourses[]
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @default(now())

  @@index([userId])
}

model BillingDetailsCourses {
  id               String         @id @default(uuid())
  billingDetails   BillingDetails @relation(fields: [billingDetailsId], references: [id], onDelete: Cascade)
  billingDetailsId String
  course           Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())

  @@unique([billingDetailsId, courseId])
  @@index([billingDetailsId])
  @@index([courseId])
}

model Cart {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  isEdited  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([courseId])
}

model CouponUsage {
  id       String   @id @default(uuid())
  couponId String
  userId   String
  courseId String
  usedAt   DateTime @default(now())
  coupon   Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([couponId, userId, courseId])
}

model CourseCompletion {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId      String
  completedAt   DateTime @default(now())
  certificateId String   @unique
  grade         String?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Certificate {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  course         Course   @relation(fields: [courseId], references: [id])
  courseId       String
  issuedAt       DateTime @default(now())
  certificateUrl String?

  @@unique([userId, courseId])
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String
  subject   String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ZoomLiveClass {
  id                 String  @id @default(cuid())
  title              String
  description        String
  startTime          String
  zoomLink           String?
  zoomMeetingId      String?
  zoomPassword       String?
  isActive           Boolean @default(true)
  price              Float   @default(0)
  getPrice           Boolean @default(false)
  registrationFee    Float   @default(0)
  courseFee          Float   @default(0)
  courseFeeEnabled   Boolean @default(false)
  capacity           Int?
  recurringClass     Boolean @default(false)
  thumbnailUrl       String
  hasModules         Boolean @default(false)
  isFirstModuleFree  Boolean @default(false)
  currentRaga        String?
  currentOrientation String?
  sessionDescription String?
  slug               String  @unique

  // Relations
  createdBy     User                @relation(fields: [userId], references: [id])
  userId        String
  modules       ZoomSessionModule[]
  subscriptions ZoomSubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  REJECTED
  PENDING_APPROVAL
  REGISTERED
}

model ZoomSubscription {
  id         String             @id @default(uuid())
  startDate  DateTime           @default(now())
  endDate    DateTime
  status     SubscriptionStatus @default(ACTIVE)
  isApproved Boolean            @default(false)
  moduleId   String?

  // Registration status
  isRegistered     Boolean @default(false)
  hasAccessToLinks Boolean @default(false)

  // Relations
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  zoomLiveClass   ZoomLiveClass      @relation(fields: [zoomLiveClassId], references: [id], onDelete: Cascade)
  zoomLiveClassId String
  module          ZoomSessionModule? @relation(fields: [moduleId], references: [id])

  // Payment tracking
  lastPaymentDate       DateTime      @default(now())
  nextPaymentDate       DateTime
  payments              ZoomPayment[]
  registrationPaymentId String? // For tracking registration payments

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, zoomLiveClassId])
  @@index([userId])
  @@index([zoomLiveClassId])
  @@index([moduleId])
}

model ZoomSessionModule {
  id            String   @id @default(uuid())
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  zoomLink      String?
  zoomMeetingId String?
  zoomPassword  String?
  position      Int      @default(1)
  isFree        Boolean  @default(false)

  // Relations
  zoomLiveClass   ZoomLiveClass      @relation(fields: [zoomLiveClassId], references: [id], onDelete: Cascade)
  zoomLiveClassId String
  subscriptions   ZoomSubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([zoomLiveClassId])
}

enum PaymentType {
  REGISTRATION
  COURSE_ACCESS
  FULL_PAYMENT
}

model ZoomPayment {
  id                  String        @id @default(uuid())
  amount              Float
  razorpay_order_id   String?
  razorpay_payment_id String?
  razorpay_signature  String?
  status              PaymentStatus @default(PENDING)
  receiptNumber       String        @unique
  paymentType         PaymentType   @default(FULL_PAYMENT)

  // Relations
  subscription   ZoomSubscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  user           User             @relation(fields: [userId], references: [id])
  userId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
  @@index([subscriptionId])
}
